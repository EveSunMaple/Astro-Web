---
import { Icon } from "astro-icon/components";

interface Props {
  slug: string;
  parentId?: string;
}

const { slug, parentId } = Astro.props;
---

<form class="comment-form space-y-4" data-slug={slug} data-parent-id={parentId}>
  <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
    <div class="form-control">
      <label class="label">
        <span class="label-text">Nickname*</span>
      </label>
      <input type="text" name="nickname" class="input input-bordered w-full" required minlength="2" maxlength="50" />
    </div>

    <div class="form-control">
      <label class="label">
        <span class="label-text">Email*</span>
      </label>
      <input type="email" name="email" class="input input-bordered w-full" required />
    </div>
  </div>

  <div class="form-control">
    <label class="label">
      <span class="label-text">Website</span>
    </label>
    <input type="url" name="website" class="input input-bordered w-full" placeholder="https://" />
  </div>

  <div class="form-control">
    <label class="label">
      <span class="label-text">Comment*</span>
    </label>
    <textarea name="content" class="textarea textarea-bordered h-24" required minlength="2"></textarea>
    <label class="label">
      <span class="label-text-alt">Supports Markdown</span>
    </label>
  </div>

  <div class="flex justify-end gap-2">
    {
      parentId && (
        <button type="button" class="btn btn-ghost cancel-reply">
          Cancel Reply
        </button>
      )
    }
    <button type="submit" class="btn btn-primary submit-button">
      <Icon name="lucide:send" class="w-4 h-4 mr-2" />
      Submit
    </button>
  </div>
</form>

<script>
  import * as AV from "leancloud-storage";
  import { marked } from "marked";
  import gravatar from "gravatar";

  // 初始化 LeanCloud

  function initCommentForm() {
    // 只选择未初始化的表单
    const forms = document.querySelectorAll(".comment-form:not([data-initialized])");

    forms.forEach((form) => {
      // 标记为已初始化
      form.setAttribute("data-initialized", "true");

      // 提交事件处理
      form.addEventListener("submit", async (e) => {
        e.preventDefault();
        const form = e.target as HTMLFormElement;
        const submitBtn = form.querySelector(".submit-button") as HTMLButtonElement;
        const originalBtnContent = submitBtn.innerHTML;

        try {
          submitBtn.disabled = true;
          submitBtn.innerHTML = '<span class="loading loading-spinner"></span> Submitting...';

          const formData = new FormData(form);
          const data = {
            nickname: formData.get("nickname"),
            email: formData.get("email"),
            website: formData.get("website") || null,
            content: formData.get("content"),
            slug: form.dataset.slug,
            parentId: form.dataset.parentId || null,
            avatar: gravatar.url(formData.get("email") as string, {
              s: "100",
              d: "mp",
            }),
          };

          // 创建评论
          const Comment = AV.Object.extend("Comment");
          const comment = new Comment();

          await comment.save({
            ...data,
            content: marked(data.content as string),
          });

          // 重置表单
          form.reset();

          // 如果是回复表单，移除它
          if (form.closest(".reply-form")) {
            form.closest(".reply-form").remove();
          }

          // 刷新评论
          document.dispatchEvent(new CustomEvent("commentsUpdated"));

          // 显示成功提示
          const toast = document.createElement("div");
          toast.className = "toast toast-bottom toast-center";
          toast.innerHTML = `
            <div class="alert alert-success">
              <span>Comment submitted successfully!</span>
            </div>
          `;
          document.body.appendChild(toast);
          setTimeout(() => toast.remove(), 3000);
        } catch (error) {
          console.error("Error submitting comment:", error);
          const toast = document.createElement("div");
          toast.className = "toast toast-bottom toast-center";
          toast.innerHTML = `
            <div class="alert alert-error">
              <span>Error submitting comment. Please try again.</span>
            </div>
          `;
          document.body.appendChild(toast);
        } finally {
          submitBtn.disabled = false;
          submitBtn.innerHTML = originalBtnContent;
        }
      });

      // 处理取消回复
      const cancelBtn = form.querySelector(".cancel-reply");
      if (cancelBtn) {
        cancelBtn.addEventListener("click", () => {
          const replyForm = cancelBtn.closest(".reply-form");
          if (replyForm) {
            replyForm.remove();
          }
        });
      }
    });
  }

  initCommentForm();

  // Initialize on page load and after navigation
  document.addEventListener("swup:page:view", initCommentForm);
</script>
