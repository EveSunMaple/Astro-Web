---
import { Icon } from "astro-icon/components";

interface Props {
  slug: string;
}

const { slug } = Astro.props;

const reactions = [
  { name: "like", icon: "lucide:heart", label: "Like" },
  { name: "celebrate", icon: "lucide:party-popper", label: "Celebrate" },
  { name: "support", icon: "lucide:thumbs-up", label: "Support" },
  { name: "bookmark", icon: "lucide:thumbs-down", label: "Dislike" },
];
---

<div class="reactions-container" data-slug={slug}>
  <div class="flex flex-wrap gap-2">
    {
      reactions.map((reaction) => (
        <button class="btn btn-ghost gap-2 reaction-button" data-reaction={reaction.name}>
          <Icon name={reaction.icon} class="w-5 h-5 transition-colors duration-300" />
          <span class="reaction-label">{reaction.label}</span>
          <span class="badge badge-sm reaction-count">0</span>
        </button>
      ))
    }
  </div>
</div>

<script>
  import * as AV from "leancloud-storage";

  function initReactions() {
    const container = document.querySelector(".reactions-container");
    const slug = container.dataset.slug;
    let userReactions = new Set();

    // Load user's previous reactions from localStorage
    try {
      const stored = localStorage.getItem(`reactions_${slug}`);
      if (stored) {
        userReactions = new Set(JSON.parse(stored));
      }
    } catch (e) {
      console.error("Error loading stored reactions:", e);
    }

    async function loadReactions() {
      try {
        const query = new AV.Query("Reaction");
        query.equalTo("slug", slug);
        const results = await query.find();

        // Count reactions using the count field
        const counts = {};
        results.forEach((result) => {
          const type = result.get("type");
          const count = result.get("count") || 1;
          counts[type] = (counts[type] || 0) + count;
        });

        // Update UI
        document.querySelectorAll(".reaction-button").forEach((button) => {
          const type = button.dataset.reaction;
          const count = counts[type] || 0;
          const countEl = button.querySelector(".reaction-count");
          countEl.textContent = count;

          // Mark user's reactions
          if (userReactions.has(type)) {
            button.classList.remove("btn-ghost");
            button.classList.add("btn-primary");
            button.querySelector("svg").classList.add("text-primary-content");
          } else {
            button.classList.add("btn-ghost");
            button.classList.remove("btn-primary");
            button.querySelector("svg").classList.remove("text-primary-content");
          }
        });
      } catch (error) {
        console.error("Error loading reactions:", error);
      }
    }

    async function handleReaction(type) {
      try {
        const query = new AV.Query("Reaction");
        query.equalTo("slug", slug);
        query.equalTo("type", type);
        const results = await query.find();

        if (userReactions.has(type)) {
          // Remove reaction by decrementing count
          if (results.length) {
            const reaction = results[0];
            const currentCount = reaction.get("count") || 1;
            if (currentCount > 1) {
              reaction.set("count", currentCount - 1);
              await reaction.save();
            } else {
              await reaction.destroy();
            }
          }
          userReactions.delete(type);
        } else {
          // Add reaction by incrementing count or creating new
          if (results.length) {
            const reaction = results[0];
            const currentCount = reaction.get("count") || 1;
            reaction.set("count", currentCount + 1);
            await reaction.save();
          } else {
            const Reaction = AV.Object.extend("Reaction");
            const reaction = new Reaction();
            await reaction.save({
              slug,
              type,
              count: 1,
            });
          }
          userReactions.add(type);
        }

        // Save to localStorage
        localStorage.setItem(`reactions_${slug}`, JSON.stringify([...userReactions]));

        // Add visual feedback
        const button = document.querySelector(`[data-reaction="${type}"]`);
        button.classList.add("scale-110");
        setTimeout(() => button.classList.remove("scale-110"), 200);

        // Reload reactions
        await loadReactions();
      } catch (error) {
        console.error("Error handling reaction:", error);
        const toast = document.createElement("div");
        toast.className = "toast toast-bottom toast-center";
        toast.innerHTML = `
          <div class="alert alert-error">
            <span>Error updating reaction. Please try again.</span>
          </div>
        `;
        document.body.appendChild(toast);
        setTimeout(() => toast.remove(), 3000);
      }
    }

    // Add click handlers
    document.querySelectorAll(".reaction-button").forEach((button) => {
      button.addEventListener("click", () => {
        handleReaction(button.dataset.reaction);
      });
    });

    // Load initial reactions
    loadReactions();
  }

  // Initialize on page load and after navigation
  document.addEventListener("astro:page-load", initReactions);
</script>

<style>
  .reaction-button {
    transition: all 0.3s ease;
  }

  .reaction-button:hover {
    transform: scale(1.05);
  }

  .reaction-button.btn-primary svg {
    animation: pulse 1s ease-in-out;
  }

  @keyframes pulse {
    0% {
      transform: scale(1);
    }
    50% {
      transform: scale(1.2);
    }
    100% {
      transform: scale(1);
    }
  }
</style>
