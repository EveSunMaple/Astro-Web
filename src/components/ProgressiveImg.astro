---
interface Props {
  src: string;
  alt: string;
  class?: string;
  width?: number;
  height?: number;
}

const { src, alt, class: className, width, height } = Astro.props;
---

<div class="progressive-img-container">
  <div class="skeleton"></div>
  <img
    src={src}
    alt={alt}
    class:list={["progressive-img", className]}
    width={width}
    height={height}
    loading="lazy"
    onload="this.classList.add('loaded')"
    onerror="this.onerror=null; this.src=document.body.dataset.fallbackImage;"
  />
</div>

<style>
  .progressive-img-container {
    position: relative;
    overflow: hidden;
    background-color: hsl(var(--b2));
  }

  .skeleton {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, hsl(var(--b2)) 25%, hsl(var(--b3)) 50%, hsl(var(--b2)) 75%);
    background-size: 200% 100%;
    animation: loading 1.5s infinite;
  }

  .progressive-img {
    display: block;
    width: 100%;
    height: auto;
    opacity: 0;
    transition: opacity 0.3s ease-in-out;
  }

  .progressive-img.loaded {
    opacity: 1;
  }

  .progressive-img.loaded + .skeleton {
    display: none;
  }

  @keyframes loading {
    0% {
      background-position: 200% 0;
    }
    100% {
      background-position: -200% 0;
    }
  }
</style>

<script>
  // Store fallback image path in body dataset for global access
  document.body.dataset.fallbackImage = "/images/placeholder.svg";

  // Enhanced image error handling
  document.querySelectorAll(".progressive-img").forEach((img) => {
    img.addEventListener("error", function (e) {
      const imgElement = e.target as HTMLImageElement;
      if (imgElement.src !== document.body.dataset.fallbackImage) {
        imgElement.src = document.body.dataset.fallbackImage;
      }
    });
  });
</script>
