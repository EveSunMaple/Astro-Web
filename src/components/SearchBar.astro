---
import { Icon } from "astro-icon/components";
---

<div class="search-container relative">
  <div 
    id="search-bar" 
    class="search-bar-collapsed flex items-center rounded-full bg-base-200/50 hover:bg-base-200 transition-all duration-300 cursor-text shadow-sm"
  >
    <div class="search-icon px-3">
      <Icon name="lucide:search" class="w-5 h-5 stroke-current" />
    </div>
    <input 
      type="text" 
      id="search-input" 
      class="search-input w-12 bg-transparent border-none outline-none text-base py-2 transition-all duration-300" 
      placeholder="Search..." 
      autocomplete="off"
    />
  </div>
  
  <!-- 搜索下拉结果 -->
  <div 
    id="search-results-dropdown" 
    class="search-results-dropdown hidden absolute top-full right-0 mt-2 bg-base-100/95 backdrop-blur-md border border-base-300 rounded-xl shadow-xl z-50 w-screen sm:w-[28rem] md:w-[32rem] max-w-[calc(100vw-2rem)] overflow-hidden"
  >
    <!-- 窗口标题栏 -->
    <div 
      class="bg-base-200 py-3 px-4 flex items-center justify-between border-b border-base-300"
    >
      <div class="flex items-center gap-3">
        <Icon name="lucide:search" class="w-5 h-5 text-primary" />
        <h3 class="font-medium">Search Results</h3>
      </div>
      <div class="flex items-center gap-2">
        <div class="dropdown dropdown-end">
          <div tabindex="0" role="button" class="btn btn-sm btn-ghost gap-1">
            <Icon name="lucide:filter" class="w-4 h-4" />
            <span>Filter</span>
          </div>
          <div class="card dropdown-content z-[1] shadow-lg bg-base-200 rounded-xl w-72">
            <div class="card-body p-4 gap-3">
              <h6 class="font-semibold text-base">Tags</h6>
              <div class="max-h-40 overflow-y-auto pr-1" id="tag-filters">
                <label class="flex items-center mb-2">
                  <input type="checkbox" class="checkbox checkbox-sm checkbox-primary mr-2" value="all" checked />
                  <span>All</span>
                </label>
                <!-- 标签将通过 JavaScript 动态加载 -->
              </div>
              
              <div class="divider my-1"></div>
              
              <h6 class="font-semibold text-base">Categories</h6>
              <div class="max-h-40 overflow-y-auto pr-1" id="category-filters">
                <label class="flex items-center mb-2">
                  <input type="checkbox" class="checkbox checkbox-sm checkbox-primary mr-2" value="all" checked />
                  <span>All</span>
                </label>
                <!-- 分类将通过 JavaScript 动态加载 -->
              </div>
            </div>
          </div>
        </div>
        <button class="btn btn-sm btn-circle btn-ghost text-base-content/70 hover:text-error transition-colors" id="close-search-dropdown">
          <Icon name="lucide:x" class="w-4 h-4" />
        </button>
      </div>
    </div>
    
    <!-- 结果容器 -->
    <div id="search-results" class="search-results-container p-4 max-h-[60vh] overflow-y-auto">
      <div class="text-base-content/70 text-center py-8">
        <Icon name="lucide:search" class="w-12 h-12 mx-auto mb-3 opacity-20" />
        <p>Enter keywords to start searching</p>
      </div>
    </div>
  </div>
</div>

<script>
  // 当组件加载后执行
  document.addEventListener("DOMContentLoaded", setupSearch);
  // 当使用 Swup 进行页面切换后重新初始化
  document.addEventListener("swup:page:view", setupSearch);

  function setupSearch() {
    const searchBar = document.getElementById("search-bar") as HTMLElement;
    const searchInput = document.getElementById("search-input") as HTMLInputElement;
    const searchResultsDropdown = document.getElementById("search-results-dropdown") as HTMLElement;
    const closeSearchDropdown = document.getElementById("close-search-dropdown") as HTMLElement;
    
    if (!searchBar || !searchInput || !searchResultsDropdown || !closeSearchDropdown) return;
    
    // 初始化搜索框状态
    let isSearchExpanded = false;
    
    // 点击搜索栏时展开
    searchBar.addEventListener("click", () => {
      if (!isSearchExpanded) {
        expandSearchBar();
      }
    });
    
    // 展开搜索栏
    function expandSearchBar() {
      searchBar.classList.remove("search-bar-collapsed");
      searchBar.classList.add("search-bar-expanded", "w-52", "sm:w-64");
      searchInput.classList.remove("w-12");
      searchInput.classList.add("w-full", "px-1");
      searchInput.focus();
      isSearchExpanded = true;
      
      // 加载标签和分类列表
      loadTagsAndCategories();
    }
    
    // 关闭搜索框
    function collapseSearchBar() {
      if (!searchInput.value.trim()) {
        searchBar.classList.remove("search-bar-expanded", "w-52", "sm:w-64");
        searchBar.classList.add("search-bar-collapsed");
        searchInput.classList.remove("w-full", "px-1");
        searchInput.classList.add("w-12");
        isSearchExpanded = false;
      }
      
      if (!searchResultsDropdown.classList.contains("hidden")) {
        searchResultsDropdown.classList.add("hidden");
      }
    }
    
    // 点击关闭按钮
    closeSearchDropdown.addEventListener("click", (e: Event) => {
      e.stopPropagation();
      searchResultsDropdown.classList.add("hidden");
      collapseSearchBar();
    });
    
    // 按ESC键关闭
    document.addEventListener("keydown", (e: KeyboardEvent) => {
      if (e.key === "Escape" && isSearchExpanded) {
        collapseSearchBar();
        searchResultsDropdown.classList.add("hidden");
      }
    });
    
    // 点击外部区域关闭
    document.addEventListener("click", (e: MouseEvent) => {
      const target = e.target as HTMLElement;
      const isSearchContainer = target.closest(".search-container");
      if (!isSearchContainer && isSearchExpanded) {
        collapseSearchBar();
      }
    });
    
    // 搜索输入处理
    let debounceTimer: number;
    searchInput.addEventListener("input", (e: Event) => {
      const target = e.target as HTMLInputElement;
      clearTimeout(debounceTimer);
      debounceTimer = setTimeout(() => {
        const query = target.value.trim();
        
        if (query.length < 2) {
          searchResultsDropdown.classList.add("hidden");
          return;
        }
        
        // 显示搜索结果下拉框
        searchResultsDropdown.classList.remove("hidden");
        
        // 获取选中的标签和分类
        const selectedTags = getSelectedValues("tag-filters");
        const selectedCategories = getSelectedValues("category-filters");
        
        // 执行搜索
        performSearch(query, selectedTags, selectedCategories);
      }, 300);
    });
    
    // 焦点时显示下拉框（如果有查询）
    searchInput.addEventListener("focus", () => {
      const query = searchInput.value.trim();
      if (query.length >= 2) {
        searchResultsDropdown.classList.remove("hidden");
      }
    });
  }
  
  async function loadTagsAndCategories() {
    try {
      // 从 API 端点获取所有标签和分类
      const response = await fetch("/api/content-metadata");
      if (!response.ok) throw new Error("Failed to fetch content metadata");
      
      const { tags, categories } = await response.json();
      
      // 填充标签过滤器
      const tagFiltersContainer = document.getElementById("tag-filters");
      if (tagFiltersContainer && tags.length) {
        // 清除现有的子元素，但保留"全部"选项
        const allOption = tagFiltersContainer.querySelector('input[value="all"]')?.closest("label");
        if (allOption) {
          tagFiltersContainer.innerHTML = "";
          tagFiltersContainer.appendChild(allOption);
          
          // 添加标签
          tags.forEach((tag: string) => {
            const label = document.createElement("label");
            label.className = "flex items-center mb-2";
            
            const checkbox = document.createElement("input");
            checkbox.type = "checkbox";
            checkbox.className = "checkbox checkbox-sm checkbox-primary mr-2";
            checkbox.value = tag;
            
            const span = document.createElement("span");
            span.textContent = tag;
            
            label.appendChild(checkbox);
            label.appendChild(span);
            tagFiltersContainer.appendChild(label);
          });
        }
      }
      
      // 填充分类过滤器
      const categoryFiltersContainer = document.getElementById("category-filters");
      if (categoryFiltersContainer && categories.length) {
        // 清除现有的子元素，但保留"全部"选项
        const allOption = categoryFiltersContainer.querySelector('input[value="all"]')?.closest("label");
        if (allOption) {
          categoryFiltersContainer.innerHTML = "";
          categoryFiltersContainer.appendChild(allOption);
          
          // 添加分类
          categories.forEach((category: string) => {
            const label = document.createElement("label");
            label.className = "flex items-center mb-2";
            
            const checkbox = document.createElement("input");
            checkbox.type = "checkbox";
            checkbox.className = "checkbox checkbox-sm checkbox-primary mr-2";
            checkbox.value = category;
            
            const span = document.createElement("span");
            span.textContent = category;
            
            label.appendChild(checkbox);
            label.appendChild(span);
            categoryFiltersContainer.appendChild(label);
          });
        }
      }
      
      // 设置复选框逻辑
      setupCheckboxLogic("tag-filters");
      setupCheckboxLogic("category-filters");
      
      // 为筛选器添加变更事件
      document.querySelectorAll("#tag-filters input, #category-filters input").forEach((checkbox) => {
        checkbox.addEventListener("change", () => {
          const searchInput = document.getElementById("search-input") as HTMLInputElement;
          if (!searchInput) return;
          
          const query = searchInput.value.trim();
          if (query.length >= 2) {
            const selectedTags = getSelectedValues("tag-filters");
            const selectedCategories = getSelectedValues("category-filters");
            performSearch(query, selectedTags, selectedCategories);
          }
        });
      });
      
    } catch (error) {
      console.error("Error loading tags and categories:", error);
    }
  }
  
  function setupCheckboxLogic(containerId: string) {
    const container = document.getElementById(containerId);
    if (!container) return;
    
    const allCheckbox = container.querySelector('input[value="all"]') as HTMLInputElement;
    const otherCheckboxes = Array.from(
      container.querySelectorAll('input[type="checkbox"]:not([value="all"])')
    ) as HTMLInputElement[];
    
    // 点击"全部"选项时的逻辑
    allCheckbox?.addEventListener("change", () => {
      if (allCheckbox.checked) {
        otherCheckboxes.forEach((cb) => {
          cb.checked = false;
        });
      }
    });
    
    // 点击其他选项时的逻辑
    otherCheckboxes.forEach((checkbox) => {
      checkbox.addEventListener("change", () => {
        // 如果有任何其他选项被选中，取消选中"全部"
        const anyOtherChecked = otherCheckboxes.some((cb) => cb.checked);
        if (allCheckbox) allCheckbox.checked = !anyOtherChecked;
        
        // 如果没有任何选项被选中，重新选中"全部"
        if (!anyOtherChecked && allCheckbox) {
          allCheckbox.checked = true;
        }
      });
    });
  }
  
  function getSelectedValues(containerId: string): string[] {
    const container = document.getElementById(containerId);
    if (!container) return [];
    
    const allCheckbox = container.querySelector('input[value="all"]') as HTMLInputElement;
    if (allCheckbox?.checked) return []; // 如果选择了"全部"，返回空数组表示不过滤
    
    return Array.from(container.querySelectorAll('input[type="checkbox"]:checked'))
      .map((cb: Element) => (cb as HTMLInputElement).value);
  }
  
  async function performSearch(query: string, tags: string[], categories: string[]) {
    const searchResults = document.getElementById("search-results");
    if (!searchResults) return;
    
    // 显示加载状态
    searchResults.innerHTML = `
      <div class="flex flex-col items-center justify-center py-8">
        <span class="loading loading-spinner loading-md mb-3"></span>
        <p class="text-base-content/70">Searching...</p>
      </div>
    `;
    
    try {
      // 调用搜索 API
      const response = await fetch("/api/search", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          query,
          tags: tags.length > 0 ? tags : undefined,
          categories: categories.length > 0 ? categories : undefined,
        }),
      });
      
      if (!response.ok) throw new Error("Search request failed");
      
      const results = await response.json();
      
      if (results.length === 0) {
        searchResults.innerHTML = `
          <div class="text-center py-8">
            <Icon name="lucide:x-circle" class="w-12 h-12 mx-auto mb-3 opacity-20" />
            <p class="text-base-content/70">No matching results found</p>
          </div>
        `;
        return;
      }
      
      // 显示搜索结果
      const resultsHtml = results.map((result: any) => `
        <a href="${result.url}" class="search-result block p-3 mb-3 hover:bg-base-200 rounded-lg transition-colors duration-300 border-l-4 border-transparent hover:border-primary group">
          <h3 class="font-semibold text-lg group-hover:text-primary transition-colors">${highlightMatch(result.title, query)}</h3>
          ${result.snippet ? `
            <p class="text-base-content/80 mt-2 line-clamp-2">${highlightMatch(result.snippet, query)}</p>
          ` : ""}
          <div class="flex flex-wrap gap-1 mt-3">
            ${result.categories.map((category: string) => 
              `<span class="badge badge-outline">${category}</span>`
            ).join("")}
            ${result.tags.map((tag: string) => 
              `<span class="badge badge-ghost">${tag}</span>`
            ).join("")}
          </div>
        </a>
      `).join("");
      
      searchResults.innerHTML = resultsHtml;
      
    } catch (error) {
      console.error("Error performing search:", error);
      searchResults.innerHTML = `
        <div class="text-center py-8">
          <Icon name="lucide:alert-triangle" class="w-12 h-12 mx-auto mb-3 text-error opacity-50" />
          <p class="text-error">Error searching, please try again later</p>
        </div>
      `;
    }
  }
  
  function highlightMatch(text: string, query: string): string {
    if (!text) return "";
    
    // 转义正则表达式特殊字符
    const escapedQuery = query.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
    
    // 创建正则表达式以匹配查询（不区分大小写）
    const regex = new RegExp(`(${escapedQuery})`, "gi");
    
    // 替换匹配项为带有高亮标记的版本
    return text.replace(regex, '<mark class="bg-primary/80 text-primary-content font-medium px-1 py-0.5 rounded">$1</mark>');
  }
</script>

<style>
  /* 搜索框动画 */
  .search-bar-collapsed {
    width: 200px;
    transition: 
      width 0.3s cubic-bezier(0.25, 1, 0.5, 1),
      background-color 0.2s ease;
  }
  
  .search-bar-expanded {
    transition: 
      width 0.3s cubic-bezier(0.25, 1, 0.5, 1),
      background-color 0.2s ease;
  }
  
  .search-input {
    opacity: 0;
    transition: 
      width 0.3s cubic-bezier(0.25, 1, 0.5, 1),
      opacity 0.15s ease;
  }
  
  .search-bar-expanded .search-input {
    opacity: 1;
    transition: 
      width 0.3s cubic-bezier(0.25, 1, 0.5, 1),
      opacity 0.3s ease 0.05s;
  }
  
  /* 搜索结果下拉框样式 */
  .search-results-dropdown {
    animation: slideDown 0.3s cubic-bezier(0.34, 1.56, 0.64, 1) forwards;
    box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1),
                0 10px 15px -5px rgba(0, 0, 0, 0.05);
  }
  
  @keyframes slideDown {
    from {
      opacity: 0;
      transform: translateY(-8px) scale(0.98);
    }
    to {
      opacity: 1;
      transform: translateY(0) scale(1);
    }
  }
  
  /* 为搜索结果容器定义滚动条样式 */
  .search-results-container {
    scrollbar-width: thin;
    scrollbar-color: var(--b3) transparent;
  }
  
  .search-results-container::-webkit-scrollbar {
    width: 5px;
  }
  
  .search-results-container::-webkit-scrollbar-track {
    background: transparent;
  }
  
  .search-results-container::-webkit-scrollbar-thumb {
    background-color: var(--b3);
    border-radius: 10px;
  }
  
  /* 搜索结果的动画效果 */
  .search-result {
    animation: fadeIn 0.4s ease forwards;
  }
  
  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(5px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style> 