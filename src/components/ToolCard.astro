---
import ThemeButton from "../widget/ThemeButton.astro";
import BackToTopButton from "../widget/BackToTopButton.astro";
---

<div class="flex-col gap-4 w-full sticky top-8">
  <div
    class="grid gap-4 grid-cols-2 md:grid-cols-1 lg:grid-cols-2 justify-center mb-b w-full max-h-[600px] overflow-hide card bg-base-100 shadow-xl p-4 transition-colors"
    id="button-box"
  >
    <BackToTopButton id="back-button" className="card" />
    <ThemeButton id="side-theme-button" className="card" />
  </div>

  <div
    class="mb-b w-full max-h-[65vh] overflow-hide top-8 card bg-base-100 shadow-xl p-4 menu transition-colors"
    id="content-box"
  >
    <div class="skeleton h-4 w-28"></div>
    <br />
    <div class="skeleton h-4 w-full"></div>
    <br />
    <div class="skeleton h-4 w-full"></div>
    <br />
    <div class="skeleton h-4 w-full"></div>
    <br />
  </div>
</div>
<script>
  function getCleanText(element: HTMLElement) {
    let text = "";
    element.childNodes.forEach((node: ChildNode) => {
      if (node.nodeType === Node.TEXT_NODE) {
        text += node.textContent;
      } else if (
        node.nodeType === Node.ELEMENT_NODE &&
        (node as HTMLElement).className !== "katex-mathml"
      ) {
        text += getCleanText(node as HTMLElement);
      }
    });
    return text;
  }

  function addContent() {
    const tocBox = document.getElementById("content-box") || null;
    const headings = Array.from(
      document.querySelectorAll("h1, h2, h3, h4, h5, h6"),
    );

    const generateTocContent = () => {
      let tocContent =
        "<ul class='overflow-auto w-full list-none m-0 p-0' id='catalogs'>";
      let levelCounters = [0, 0, 0, 0, 0, 0];
      headings.forEach((heading) => {
        let headingText = getCleanText(heading as HTMLElement);
        const headingId = heading.id;
        const headingLevel = parseInt(heading.tagName.charAt(1), 10);

        if (headingId && headingText && headingLevel) {
          headingText = headingText.replace(/#/g, "");
          const level = headingLevel - 1;
          levelCounters[level]++;
          levelCounters.fill(0, level + 1);
          var numbering = levelCounters.slice(1, level + 1).join(".");
          if (numbering == "") numbering = "‚öù";
          tocContent += `
            <li class="list-none m-0 p-0">
              <a class="w-full text-base font-semibold p-2 level-${headingLevel}" href="#${headingId}">
                <span class="toc-number">${numbering}</span>${headingText}
              </a>
            </li>`;
        }
      });
      tocContent += "</ul>";
      return tocContent;
    };

    if (tocBox) {
      tocBox.innerHTML = generateTocContent();
    }

    const getTotalHeight = (headings: Element[], currentIndex: number) => {
      let totalHeight = 0;
      if (currentIndex > 0) currentIndex--;
      for (let i = 0; i < currentIndex; i++) {
        const currentHeading = document.querySelector(
          `a[href="#${headings[i].id}"]`,
        ) as HTMLElement;
        if (currentHeading) {
          totalHeight += currentHeading.offsetHeight;
        }
      }
      return totalHeight;
    };

    const UpdateCurrentHeading = () => {
      let currentIndex = headings.findIndex((heading) => {
        return heading.getBoundingClientRect().top > window.innerHeight * 0.2;
      });
      if (currentIndex === -1) {
        currentIndex = headings.length - 1;
      } else if (currentIndex > 0) {
        currentIndex -= 1;
      }
      const currentHeading = document.querySelector(
        `a[href="#${headings[currentIndex].id}"]`,
      ) as HTMLElement;
      if (currentHeading) {
        document.querySelector(".active")?.classList.remove("active");
        currentHeading.classList.add("active");
        document.getElementById("catalogs")?.scrollTo({
          top: getTotalHeight(headings, currentIndex),
          behavior: "smooth",
        });
      }
    };
    document.addEventListener("scroll", UpdateCurrentHeading);
  }

  document.addEventListener("swup:page:view", addContent);
</script>
