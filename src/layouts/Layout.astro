---
import "../styles/global.css";
import ThemeToggle from "../components/ThemeToggle.astro";
import Navigation from "../components/Navigation.astro";
import Footer from "../components/Footer.astro";
import { ClientRouter } from "astro:transitions";
import background from "../assets/background.svg";

interface Props {
  title: string;
  description?: string;
  image?: string;
}

const { title, description, image } = Astro.props;
---

<!doctype html>
<html lang="zh" class="bg-base-300" data-theme="winter">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    {description && <meta name="description" content={description} />}
    <!-- Open Graph -->
    <meta property="og:type" content="website" />
    <meta property="og:title" content={title} />
    {description && <meta property="og:description" content={description} />}
    {image && <meta property="og:image" content={image} />}
    <script defer src="https://cloud.umami.is/script.js" data-website-id="e72a173b-34d3-468f-9cb5-cfdbd1cc2c0a"
    ></script>
  </head>
  <body
    class="min-h-screen bg-base-100 text-base-content transition-colors duration-300"
    style={`background-image: url(${background.src}); background-size: cover; background-position: center; background-attachment: fixed;`}
  >
    <div class="drawer">
      <input id="drawer-nav" type="checkbox" class="drawer-toggle" />
      <div class="drawer-content flex flex-col min-h-screen">
        <!-- Navbar -->
        <header class="sticky top-0 z-40 w-full backdrop-blur supports-backdrop-blur:bg-base-100/95">
          <Navigation />
        </header>

        <main class="flex-grow container mx-auto px-4 py-8">
          <slot />
        </main>

        <Footer />
      </div>

      <div class="drawer-side z-50">
        <label for="drawer-nav" aria-label="close sidebar" class="drawer-overlay"></label>
        <div class="menu p-4 w-80 min-h-full bg-base-200">
          <div class="flex justify-between items-center mb-4">
            <a href="/" class="text-xl font-bold">Menu</a>
          </div>
          <ul class="menu menu-vertical gap-2">
            <li><a href="/">Home</a></li>
            <li><a href="/about">About</a></li>
            <li><a href="/blog">Blog</a></li>
          </ul>
        </div>
      </div>
    </div>
  </body>
</html>

<script>
  import * as AV from "leancloud-storage";

  AV.init({
    appId: import.meta.env.PUBLIC_LEANCLOUD_APP_ID,
    appKey: import.meta.env.PUBLIC_LEANCLOUD_APP_KEY,
    serverURL: import.meta.env.PUBLIC_LEANCLOUD_SERVER_URL,
  });

  async function updatePageView(slug) {
    try {
      const query = new AV.Query("PageView");
      query.equalTo("slug", slug);
      let viewRecord = await query.first();

      if (!viewRecord) {
        const PageView = AV.Object.extend("PageView");
        viewRecord = new PageView();
        viewRecord.set("slug", slug);
        viewRecord.set("views", 0);
      }

      const viewKey = `post_view_${slug}`;
      const lastView = localStorage.getItem(viewKey);
      const now = Date.now();
      const viewTimeout = 30 * 60 * 1000; // 30 minutes

      if (!lastView || now - parseInt(lastView) > viewTimeout) {
        viewRecord.increment("views");
        await viewRecord.save();
        localStorage.setItem(viewKey, now.toString());
      }
    } catch (error) {
      console.error("Error updating page view:", error);
    }
  }

  // 在页面加载时更新浏览量
  document.addEventListener("DOMContentLoaded", () => {
    const slug =
      window.location.pathname === "/" ? "home" : window.location.pathname.replace(/^\//, "").replace(/\/$/, "");
    updatePageView(slug);
  });

  // 在 Swup 导航后更新浏览量
  document.addEventListener("swup:page:view", () => {
    const slug =
      window.location.pathname === "/" ? "home" : window.location.pathname.replace(/^\//, "").replace(/\/$/, "");
    updatePageView(slug);
  });
</script>
