---
import type { Post, Page } from "../../types";
import EnvelopeCard from "../../components/EnvelopeCard.astro";
import BaseLayout from "../../layouts/BaseLayout.astro";
import BaseCard from "../../components/BaseCard.astro";
import Pagination from "../../widget/Pagination.astro";
import { getCollection } from "astro:content";
import Search from "astro-pagefind/components/Search";

export async function getStaticPaths({ paginate }: { paginate: any }) {
  const posts = await getCollection("blog");
  const topPosts = posts.filter((post) => post.data.badge === "Pin");
  const otherPosts = posts.filter((post) => post.data.badge !== "Pin");

  topPosts.sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());
  otherPosts.sort(
    (a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf(),
  );

  const sortedPosts = [...topPosts, ...otherPosts];

  const postsWithStats = await Promise.all(
    sortedPosts.map(async (post) => {
      const { remarkPluginFrontmatter } = await post.render();

      return {
        ...post,
        remarkPluginFrontmatter: {
          readingTime: remarkPluginFrontmatter.readingTime,
          totalCharCount: remarkPluginFrontmatter.totalCharCount,
        },
      };
    }),
  );

  return paginate(postsWithStats, { pageSize: 8 });
}

const { page }: { page: Page } = Astro.props;

function generatePageLinks(totalPages: number): {
  active: string[];
  hidden: string[];
} {
  const pages = {
    active: [] as string[],
    hidden: [] as string[],
  };

  if (totalPages > 3) {
    pages.active.push("1");
    pages.active.push("...");
    pages.active.push(totalPages.toString());
    for (let i = 2; i <= totalPages - 1; i++) {
      pages.hidden.push(i.toString());
    }
  } else {
    for (let i = 1; i <= totalPages; i++) {
      pages.active.push(i.toString());
    }
  }
  return pages;
}

const totalPages = Math.ceil(page.total / page.size);
const pageLinks = generatePageLinks(totalPages);
---

<BaseLayout title="Blog">
  <BaseCard title="search">
    <Search
      id="search"
      className="pagefind-ui"
      uiOptions={{ showImages: false }}
    />
  </BaseCard>
  {
    page.data.map((post: Post) => (
      <EnvelopeCard
        title={post.data.title}
        image={post.data.image}
        desc={post.data.description}
        url={"/blog/" + post.slug}
        pubDate={post.data.pubDate}
        badge={post.data.badge}
        categories={post.data.categories}
        tags={post.data.tags}
        word={post.remarkPluginFrontmatter.totalCharCount}
        time={post.remarkPluginFrontmatter.readingTime}
        target="_self"
      />
    ))
  }
  <Pagination
    page={page}
    totalPages={totalPages}
    pageLinks={pageLinks}
    baseUrl={`/blog`}
  />
</BaseLayout>
