---
import { getCollection } from "astro:content";
import Layout from "../../layouts/Layout.astro";
import TableOfContents from "../../components/TableOfContents.astro";
import PostStats from "../../components/PostStats.astro";
import PostFooter from "../../components/PostFooter.astro";
import Comments from "../../components/Comments.astro";
import { getReadingTime } from "../../utils/readingTime";
import { format } from "date-fns";
import { Icon } from "astro-icon/components";

export async function getStaticPaths() {
  const posts = await getCollection("blog");
  return posts.map((post) => ({
    params: { slug: post.slug },
    props: { post },
  }));
}

const { post } = Astro.props;
const { Content, headings } = await post.render();

// Calculate reading time
const readingTime = getReadingTime(post.body);

// Author info (customize as needed)
const author = {
  name: "SunMaple",
  avatar: "https://github.com/EveSunMaple.png",
  bio: "A student who loves programming and technology.",
};

// Get canonical URL for the post
const canonicalURL = new URL(Astro.url.pathname, Astro.site);
---

<Layout title={post.data.title} description={post.data.description} image={post.data.featuredImage}>
  <div class="container mx-auto px-4 lg:px-8">
    <div class="flex flex-col xl:flex-row xl:gap-8">
      <!-- Main Content -->
      <article class="flex-grow xl:w-3/4">
        <div transition:name=`image-${post.slug}`>
          {
            post.data.featuredImage && (
              <img
                class="w-full aspect-video object-cover rounded-lg mb-8"
                src={post.data.featuredImage}
                alt={post.data.title}
                width="800"
                height="400"
              />
            )
          }
        </div>

        <header class="mb-12">
          <h2
            class="text-4xl lg:text-5xl font-bold mb-6 leading-tight animate-fade-up"
            transition:name=`title-${post.slug}`
          >
            {post.data.title}
          </h2>

          <div class="flex flex-wrap gap-4 text-sm text-base-content/70 mb-4 mt-6">
            <time datetime={post.data.pubDate.toISOString()} class="flex items-center">
              <Icon name="lucide:calendar" class="inline h-4 w-4 mr-1" />
              {format(post.data.pubDate, "MMMM d, yyyy")}
            </time>
            {
              post.data.updatedDate && (
                <time datetime={post.data.updatedDate.toISOString()} class="flex items-center">
                  <Icon name="lucide:refresh-cw" class="inline h-4 w-4 mr-1" />
                  Updated: {format(post.data.updatedDate, "MMMM d, yyyy")}
                </time>
              )
            }
          </div>

          <div class="flex flex-wrap gap-2">
            {
              post.data.categories.map((category) => (
                <a
                  href={`/category/${category.toLowerCase()}`}
                  class="badge badge-neutral gap-1 hover:scale-105 transition-transform duration-200"
                >
                  <Icon name="lucide:folder" class="h-4 w-4" />
                  {category}
                </a>
              ))
            }
            {
              post.data.tags.map((tag) => (
                <a
                  href={`/tag/${tag.toLowerCase()}`}
                  class="badge badge-outline gap-1 hover:scale-105 transition-transform duration-200"
                >
                  <Icon name="lucide:tag" class="h-4 w-4" />
                  {tag}
                </a>
              ))
            }
          </div>

          <PostStats readingTime={readingTime} />
        </header>

        <div class="prose prose-lg max-w-none">
          <Content />
        </div>

        <PostFooter
          title={post.data.title}
          url={canonicalURL.toString()}
          pubDate={post.data.pubDate}
          categories={post.data.categories}
          tags={post.data.tags}
          author={author}
        />

        <Comments slug={post.slug} />
      </article>

      <!-- Table of Contents -->
      <aside class="xl:w-1/4 xl:min-w-[16rem]">
        <TableOfContents headings={headings} />
      </aside>
    </div>
  </div>
</Layout>

<style>
  @keyframes fadeUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .animate-fade-up {
    animation: fadeUp 0.5s ease-out forwards;
  }
</style>
