---
import { getEntry } from "astro:content";
import Layout from "../../layouts/Layout.astro";
import TableOfContents from "../../components/TableOfContents.astro";
import PostStats from "../../components/PostStats.astro";
import PostFooter from "../../components/PostFooter.astro";
import Comments from "../../components/Comments.astro";
import ViewCounter from "../../components/ViewCounter.astro";
import { getReadingTime } from "../../utils/readingTime";
import { format } from "date-fns";
import { Icon } from "astro-icon/components";

const { slug } = Astro.params;

// Handle array slug parameters
const slugPath = Array.isArray(slug) ? slug.join("/") : slug;

if (/^\d+$/.test(slugPath)) {
  return Astro.redirect(`/blog/page/${slugPath}`, 301); // 永久重定向
}

if (!slugPath) {
  return new Response(null, {
    status: 404,
    statusText: "Not Found",
  });
}

const post = await getEntry("blog", slugPath);

if (!post) {
  return new Response(null, {
    status: 404,
    statusText: "Post Not Found",
  });
}

const { Content, headings } = await post.render();

// Calculate reading time
const readingTime = getReadingTime(post.body);

// Author info
const author = {
  name: "SunMaple",
  avatar: "/profile.webp",
  bio: "A student who loves programming and technology.",
};

// Get canonical URL
const canonicalURL = new URL(Astro.url.pathname, Astro.site);
---

<Layout title={`${post.data.title} - SaroProck`} description={post.data.description} image={post.data.featuredImage}>
  <div class="container mx-auto px-4 lg:px-8">
    <div class="flex flex-col xl:flex-row xl:gap-8">
      <article class="flex-grow xl:w-3/4">
        <!-- 文章内容保持不变 -->
        <div transition:name=`image-${post.slug}` class="relative">
          {
            post.data.featuredImage && (
              <img
                class="w-full aspect-video object-cover rounded-lg mb-8"
                src={post.data.featuredImage}
                alt={post.data.title}
                width="800"
                height="400"
              />
            )
          }
          {
            post.data.badges && post.data.badges.length > 0 && (
              <div class="absolute top-4 right-4 flex gap-3">
                {post.data.badges.map((badge) => (
                  <div class="post-badge">
                    <span class="badge-text">{badge}</span>
                  </div>
                ))}
              </div>
            )
          }
        </div>
        <header class="mb-12">
          <h2
            class={`text-4xl lg:text-5xl font-bold mb-6 leading-tight animate-fade-up ${post.data.badges && post.data.badges.length > 0 ? "post-title-with-badge" : ""}`}
            transition:name=`title-${post.slug}`
          >
            {post.data.title}
          </h2>
          {
            post.data.description && (
              <div class="description-container mt-8 mb-6 animate-slide-in">
                <p class="text-base-content/80 italic relative">
                  <span class="quote-left">"</span>
                  {post.data.description}
                  <span class="quote-right">"</span>
                </p>
              </div>
            )
          }
          <div class="flex flex-wrap gap-4 text-sm text-base-content/70 mb-4 mt-6">
            <time datetime={post.data.pubDate.toISOString()} class="flex items-center">
              <Icon name="lucide:calendar" class="inline h-4 w-4 mr-1" />
              {format(post.data.pubDate, "MMMM d, yyyy")}
            </time>
            {
              post.data.updatedDate && (
                <time datetime={post.data.updatedDate.toISOString()} class="flex items-center">
                  <Icon name="lucide:refresh-cw" class="inline h-4 w-4 mr-1" />
                  Updated: {format(post.data.updatedDate, "MMMM d, yyyy")}
                </time>
              )
            }
            <ViewCounter slug={post.slug} />
          </div>
          <div class="flex flex-wrap gap-2">
            {
              post.data.categories.map((category) => (
                <a
                  href={`/category/${category.toLowerCase()}`}
                  class="badge badge-neutral gap-1 hover:scale-105 transition-transform duration-200"
                >
                  <Icon name="lucide:folder" class="h-4 w-4" />
                  {category}
                </a>
              ))
            }
            {
              post.data.tags.map((tag) => (
                <a
                  href={`/tag/${tag.toLowerCase()}`}
                  class="badge badge-outline gap-1 hover:scale-105 transition-transform duration-200"
                >
                  <Icon name="lucide:tag" class="h-4 w-4" />
                  {tag}
                </a>
              ))
            }
          </div>
          <PostStats readingTime={readingTime} />
        </header>
        <div class="prose lg:prose-lg max-w-none">
          <Content />
        </div>
        <PostFooter
          title={post.data.title}
          url={canonicalURL.toString()}
          pubDate={post.data.pubDate}
          categories={post.data.categories}
          tags={post.data.tags}
          author={author}
        />
        <Comments slug={post.slug} />
      </article>
      <aside class="xl:w-1/4 xl:min-w-[16rem]">
        <TableOfContents headings={headings} />
      </aside>
    </div>
  </div>
</Layout>

<style>
  @keyframes fadeUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes slideIn {
    from {
      opacity: 0;
      transform: translateX(-20px);
    }
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }

  .animate-fade-up {
    animation: fadeUp 0.5s ease-out forwards;
  }

  .animate-slide-in {
    animation: slideIn 0.6s ease-out forwards;
  }

  .description-container p {
    line-height: 1.75rem;
    position: relative;
    padding-left: 1.5rem;
    padding-right: 1.5rem;
  }

  .quote-left,
  .quote-right {
    font-size: 3rem; /* 大引号 */
    color: oklch(var(--p)); /* 使用主题色 */
    position: absolute;
    top: -0.5rem;
  }

  .quote-left {
    left: 0;
  }

  .quote-right {
    right: 0;
  }

  .post-badge {
    background: oklch(var(--s));
    color: oklch(var(--sc));
    padding: 0.5rem 1.2rem;
    border-radius: 2rem;
    font-weight: bold;
    font-size: 1rem;
    box-shadow: 0 4px 15px -1px rgba(0, 0, 0, 0.1);
    transform: rotate(-2deg);
    position: relative;
    z-index: 10;
  }

  .post-title-with-badge {
    position: relative;
    display: inline-block;
  }

  .post-title-with-badge::after {
    content: "";
    position: absolute;
    bottom: 0.1em;
    left: -0.1em;
    right: -0.1em;
    height: 0.3em;
    background: oklch(var(--s) / 0.3);
    z-index: -1;
    transform: skew(-5deg);
  }
</style>
