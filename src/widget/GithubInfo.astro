---
import { Icon } from "astro-icon/components";
const { url } = Astro.props;
---

<github-info class="flex gap-4" data-url={url}>
  <span class="repo-user flex items-center gap-1">
    <Icon name="ri:user-line" class="w-4 h-4" />
    <span class="text-sm">
      <span class="loading loading-spinner loading-xs"></span>
    </span>
  </span>
  <span class="repo-star flex items-center gap-1">
    <Icon name="ri:star-line" class="w-4 h-4" />
    <span class="text-sm">
      <span class="loading loading-spinner loading-xs"></span>
    </span>
  </span>
  <span class="repo-fork flex items-center gap-1">
    <Icon name="ri:git-fork-line" class="w-4 h-4" />
    <span class="text-sm">
      <span class="loading loading-spinner loading-xs"></span>
    </span>
  </span>
</github-info>

<script>
  import { formatNumber } from "../utils/formatNumber";
  import { getRepoInfoFromUrl } from "../utils/github";

  class GithubInfo extends HTMLElement {
    connectedCallback() {
      const repoUrl = this.dataset.url;
      if (!repoUrl) return;

      const { owner, repo } = getRepoInfoFromUrl(repoUrl);
      const apiUrl = `https://api.github.com/repos/${owner}/${repo}`;

      fetch(apiUrl)
        .then((response) => {
          if (!response.ok) throw new Error("Failed to fetch repository info.");
          return response.json();
        })
        .then((data) => {
          this.querySelector(".repo-user span")!.textContent = data.owner.login;
          this.querySelector(".repo-fork span")!.textContent = formatNumber(
            data.forks_count,
          );
          this.querySelector(".repo-star span")!.textContent = formatNumber(
            data.stargazers_count,
          );
        })
        .catch((error) => {
          console.error("Error fetching repository info:", error);
        });
    }
  }

  customElements.define("github-info", GithubInfo);
</script>
